macro (bin2c OUTPUT_FILE)
  string (REGEX REPLACE "\\.| |-|/|\\\\" "_" ONCE ${OUTPUT_FILE})
  set (ONCE "RESOURCE_${ONCE}_H")

  set (OUTPUT_C "${OUTPUT_FILE}.c")
  set (OUTPUT_H "${OUTPUT_FILE}.h")
  # Create header of C file
  file (WRITE "${OUTPUT_FILE}.c" "/* Autogenerated by cmake */\n\n")
  file (APPEND "${OUTPUT_FILE}.c" "#include <stdint.h>\n\n")
  
  # Create header of H file
  file (WRITE "${OUTPUT_FILE}.h" "/* Autogenerated by bin2c */\n\n")
  file (APPEND "${OUTPUT_FILE}.h" "#ifndef ${ONCE}\n#define ${ONCE}\n")
  file (APPEND "${OUTPUT_FILE}.h" "#include <stdint.h>\n\n")

  # Iterate through binary files files
  foreach (bin ${ARGN})
    # Get short filename
    string (REGEX MATCH "([^/]+)$" filename ${bin})
    # Replace filename spaces & extension separator for C compatibility
    string (REGEX REPLACE "\\.| |-" "_" filename ${filename})
    # Convert to lower case
    string (TOLOWER ${filename} filename)
    # Read hex data from file
    file (READ ${bin} filedata HEX)
    # Convert hex data for C compatibility
    string (REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata ${filedata})
    # Append data to c file
    file (APPEND ${OUTPUT_C} "uint8_t ${filename}[] = {${filedata}};\n\nuint32_t ${filename}_size = sizeof(${filename});\n\n")
    # Append extern definitions to h file
    file (APPEND ${OUTPUT_H} "extern uint8_t ${filename}[];\n\nextern uint32_t ${filename}_size;\n\n")
  endforeach ()

  # Create footer of H file
  file (APPEND "resource/resource.h" "#endif\n")
endmacro ()
